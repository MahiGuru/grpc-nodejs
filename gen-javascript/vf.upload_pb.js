// source: vf.upload.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var vf_pb = require('./vf_pb.js');
goog.object.extend(proto, vf_pb);
var vf_row_pb = require('./vf.row_pb.js');
goog.object.extend(proto, vf_row_pb);
var vf_table_pb = require('./vf.table_pb.js');
goog.object.extend(proto, vf_table_pb);
goog.exportSymbol('proto.vf.upload.UploadRequest', null, global);
goog.exportSymbol('proto.vf.upload.UploadResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.upload.UploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.upload.UploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.upload.UploadRequest.displayName = 'proto.vf.upload.UploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.upload.UploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vf.upload.UploadResponse.repeatedFields_, null);
};
goog.inherits(proto.vf.upload.UploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.upload.UploadResponse.displayName = 'proto.vf.upload.UploadResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.upload.UploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.upload.UploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.upload.UploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.upload.UploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.vf.FieldValue.toObject) : [],
    table: (f = msg.getTable()) && vf_table_pb.Table.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.upload.UploadRequest}
 */
proto.vf.upload.UploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.upload.UploadRequest;
  return proto.vf.upload.UploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.upload.UploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.upload.UploadRequest}
 */
proto.vf.upload.UploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasetname(value);
      break;
    case 5:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vf.FieldValue.deserializeBinaryFromReader, "", new proto.vf.FieldValue());
         });
      break;
    case 10:
      var value = new vf_table_pb.Table;
      reader.readMessage(value,vf_table_pb.Table.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.upload.UploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.upload.UploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.upload.UploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.upload.UploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vf.FieldValue.serializeBinaryToWriter);
  }
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      vf_table_pb.Table.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dataSetName = 1;
 * @return {string}
 */
proto.vf.upload.UploadRequest.prototype.getDatasetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.upload.UploadRequest} returns this
 */
proto.vf.upload.UploadRequest.prototype.setDatasetname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, vf.FieldValue> fields = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vf.FieldValue>}
 */
proto.vf.upload.UploadRequest.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vf.FieldValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.vf.FieldValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vf.upload.UploadRequest} returns this
 */
proto.vf.upload.UploadRequest.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;
};


/**
 * optional vf.Table table = 10;
 * @return {?proto.vf.Table}
 */
proto.vf.upload.UploadRequest.prototype.getTable = function() {
  return /** @type{?proto.vf.Table} */ (
    jspb.Message.getWrapperField(this, vf_table_pb.Table, 10));
};


/**
 * @param {?proto.vf.Table|undefined} value
 * @return {!proto.vf.upload.UploadRequest} returns this
*/
proto.vf.upload.UploadRequest.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.upload.UploadRequest} returns this
 */
proto.vf.upload.UploadRequest.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.upload.UploadRequest.prototype.hasTable = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vf.upload.UploadResponse.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.upload.UploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.upload.UploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.upload.UploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.upload.UploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    vf_table_pb.Table.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.upload.UploadResponse}
 */
proto.vf.upload.UploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.upload.UploadResponse;
  return proto.vf.upload.UploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.upload.UploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.upload.UploadResponse}
 */
proto.vf.upload.UploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new vf_table_pb.Table;
      reader.readMessage(value,vf_table_pb.Table.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.upload.UploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.upload.UploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.upload.UploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.upload.UploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      vf_table_pb.Table.serializeBinaryToWriter
    );
  }
};


/**
 * repeated vf.Table result = 10;
 * @return {!Array<!proto.vf.Table>}
 */
proto.vf.upload.UploadResponse.prototype.getResultList = function() {
  return /** @type{!Array<!proto.vf.Table>} */ (
    jspb.Message.getRepeatedWrapperField(this, vf_table_pb.Table, 10));
};


/**
 * @param {!Array<!proto.vf.Table>} value
 * @return {!proto.vf.upload.UploadResponse} returns this
*/
proto.vf.upload.UploadResponse.prototype.setResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.vf.Table=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vf.Table}
 */
proto.vf.upload.UploadResponse.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.vf.Table, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.upload.UploadResponse} returns this
 */
proto.vf.upload.UploadResponse.prototype.clearResultList = function() {
  return this.setResultList([]);
};


goog.object.extend(exports, proto.vf.upload);

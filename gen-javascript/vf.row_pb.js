// source: vf.row.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.vf.FieldValue', null, global);
goog.exportSymbol('proto.vf.FieldValue.ValueCase', null, global);
goog.exportSymbol('proto.vf.Row', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.Row.displayName = 'proto.vf.Row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FieldValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vf.FieldValue.oneofGroups_);
};
goog.inherits(proto.vf.FieldValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FieldValue.displayName = 'proto.vf.FieldValue';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellsMap: (f = msg.getCellsMap()) ? f.toObject(includeInstance, proto.vf.FieldValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.Row}
 */
proto.vf.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.Row;
  return proto.vf.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.Row}
 */
proto.vf.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = msg.getCellsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vf.FieldValue.deserializeBinaryFromReader, "", new proto.vf.FieldValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vf.FieldValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, FieldValue> Cells = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vf.FieldValue>}
 */
proto.vf.Row.prototype.getCellsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vf.FieldValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.vf.FieldValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vf.Row} returns this
 */
proto.vf.Row.prototype.clearCellsMap = function() {
  this.getCellsMap().clear();
  return this;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vf.FieldValue.oneofGroups_ = [[5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.vf.FieldValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT32: 5,
  DOUBLE: 6,
  FLOAT: 7,
  INT64: 8,
  DATETIME: 9,
  STRING: 10,
  BOOL: 11
};

/**
 * @return {proto.vf.FieldValue.ValueCase}
 */
proto.vf.FieldValue.prototype.getValueCase = function() {
  return /** @type {proto.vf.FieldValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.vf.FieldValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FieldValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FieldValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FieldValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FieldValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    int32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    int64: jspb.Message.getFieldWithDefault(msg, 8, 0),
    datetime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    string: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bool: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FieldValue}
 */
proto.vf.FieldValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FieldValue;
  return proto.vf.FieldValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FieldValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FieldValue}
 */
proto.vf.FieldValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatetime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FieldValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FieldValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FieldValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FieldValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional int32 Int32 = 5;
 * @return {number}
 */
proto.vf.FieldValue.prototype.getInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setInt32 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearInt32 = function() {
  return jspb.Message.setOneofField(this, 5, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasInt32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double Double = 6;
 * @return {number}
 */
proto.vf.FieldValue.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 6, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float Float = 7;
 * @return {number}
 */
proto.vf.FieldValue.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 7, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 Int64 = 8;
 * @return {number}
 */
proto.vf.FieldValue.prototype.getInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setInt64 = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearInt64 = function() {
  return jspb.Message.setOneofField(this, 8, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 DateTime = 9;
 * @return {number}
 */
proto.vf.FieldValue.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setDatetime = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearDatetime = function() {
  return jspb.Message.setOneofField(this, 9, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string String = 10;
 * @return {string}
 */
proto.vf.FieldValue.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 10, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasString = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool Bool = 11;
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.setBool = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.vf.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FieldValue} returns this
 */
proto.vf.FieldValue.prototype.clearBool = function() {
  return jspb.Message.setOneofField(this, 11, proto.vf.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FieldValue.prototype.hasBool = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.vf);

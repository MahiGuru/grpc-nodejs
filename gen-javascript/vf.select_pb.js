// source: vf.select.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var vf_pb = require('./vf_pb.js');
goog.object.extend(proto, vf_pb);
var vf_table_pb = require('./vf.table_pb.js');
goog.object.extend(proto, vf_table_pb);
goog.exportSymbol('proto.vf.FilterBoolValue', null, global);
goog.exportSymbol('proto.vf.FilterNumMaxValue', null, global);
goog.exportSymbol('proto.vf.FilterNumMaxValue.Operators', null, global);
goog.exportSymbol('proto.vf.FilterNumMaxValue.ValueCase', null, global);
goog.exportSymbol('proto.vf.FilterNumMinValue', null, global);
goog.exportSymbol('proto.vf.FilterNumMinValue.Operators', null, global);
goog.exportSymbol('proto.vf.FilterNumMinValue.ValueCase', null, global);
goog.exportSymbol('proto.vf.FilterNumRangeValue', null, global);
goog.exportSymbol('proto.vf.FilterNumValue', null, global);
goog.exportSymbol('proto.vf.FilterNumValue.Operators', null, global);
goog.exportSymbol('proto.vf.FilterNumValue.ValueCase', null, global);
goog.exportSymbol('proto.vf.FilterStringValue', null, global);
goog.exportSymbol('proto.vf.FilterStringValue.Operators', null, global);
goog.exportSymbol('proto.vf.FilterValue', null, global);
goog.exportSymbol('proto.vf.FilterValue.FilterCase', null, global);
goog.exportSymbol('proto.vf.FilterValues', null, global);
goog.exportSymbol('proto.vf.GroupField', null, global);
goog.exportSymbol('proto.vf.GroupField.Group', null, global);
goog.exportSymbol('proto.vf.SelectRequest', null, global);
goog.exportSymbol('proto.vf.SelectResponse', null, global);
goog.exportSymbol('proto.vf.SortField', null, global);
goog.exportSymbol('proto.vf.SortField.Sort', null, global);
goog.exportSymbol('proto.vf.TableRequest', null, global);
goog.exportSymbol('proto.vf.TableResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.TableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vf.TableRequest.repeatedFields_, null);
};
goog.inherits(proto.vf.TableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.TableRequest.displayName = 'proto.vf.TableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.TableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.TableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.TableResponse.displayName = 'proto.vf.TableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vf.FilterValues.repeatedFields_, null);
};
goog.inherits(proto.vf.FilterValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterValues.displayName = 'proto.vf.FilterValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vf.FilterValue.oneofGroups_);
};
goog.inherits(proto.vf.FilterValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterValue.displayName = 'proto.vf.FilterValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterStringValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.FilterStringValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterStringValue.displayName = 'proto.vf.FilterStringValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterBoolValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.FilterBoolValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterBoolValue.displayName = 'proto.vf.FilterBoolValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterNumValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vf.FilterNumValue.oneofGroups_);
};
goog.inherits(proto.vf.FilterNumValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterNumValue.displayName = 'proto.vf.FilterNumValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterNumRangeValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.FilterNumRangeValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterNumRangeValue.displayName = 'proto.vf.FilterNumRangeValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterNumMinValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vf.FilterNumMinValue.oneofGroups_);
};
goog.inherits(proto.vf.FilterNumMinValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterNumMinValue.displayName = 'proto.vf.FilterNumMinValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.FilterNumMaxValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vf.FilterNumMaxValue.oneofGroups_);
};
goog.inherits(proto.vf.FilterNumMaxValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.FilterNumMaxValue.displayName = 'proto.vf.FilterNumMaxValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vf.SelectRequest.repeatedFields_, null);
};
goog.inherits(proto.vf.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.SelectRequest.displayName = 'proto.vf.SelectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.SelectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.SelectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.SelectResponse.displayName = 'proto.vf.SelectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.SortField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.SortField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.SortField.displayName = 'proto.vf.SortField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vf.GroupField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vf.GroupField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vf.GroupField.displayName = 'proto.vf.GroupField';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vf.TableRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.TableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.TableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.TableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.TableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    asofstartdate: (f = msg.getAsofstartdate()) && vf_pb.dateTime.toObject(includeInstance, f),
    asofenddate: (f = msg.getAsofenddate()) && vf_pb.dateTime.toObject(includeInstance, f),
    filtersMap: (f = msg.getFiltersMap()) ? f.toObject(includeInstance, undefined) : [],
    datefiltersMap: (f = msg.getDatefiltersMap()) ? f.toObject(includeInstance, proto.vf.dateTime.toObject) : [],
    pagesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pageno: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.TableRequest}
 */
proto.vf.TableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.TableRequest;
  return proto.vf.TableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.TableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.TableRequest}
 */
proto.vf.TableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasetname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 3:
      var value = new vf_pb.dateTime;
      reader.readMessage(value,vf_pb.dateTime.deserializeBinaryFromReader);
      msg.setAsofstartdate(value);
      break;
    case 4:
      var value = new vf_pb.dateTime;
      reader.readMessage(value,vf_pb.dateTime.deserializeBinaryFromReader);
      msg.setAsofenddate(value);
      break;
    case 5:
      var value = msg.getFiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = msg.getDatefiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vf.dateTime.deserializeBinaryFromReader, "", new proto.vf.dateTime());
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.TableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.TableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.TableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.TableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAsofstartdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vf_pb.dateTime.serializeBinaryToWriter
    );
  }
  f = message.getAsofenddate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vf_pb.dateTime.serializeBinaryToWriter
    );
  }
  f = message.getFiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDatefiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vf.dateTime.serializeBinaryToWriter);
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPageno();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional string dataSetName = 1;
 * @return {string}
 */
proto.vf.TableRequest.prototype.getDatasetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.setDatasetname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string columns = 2;
 * @return {!Array<string>}
 */
proto.vf.TableRequest.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional dateTime asOfStartDate = 3;
 * @return {?proto.vf.dateTime}
 */
proto.vf.TableRequest.prototype.getAsofstartdate = function() {
  return /** @type{?proto.vf.dateTime} */ (
    jspb.Message.getWrapperField(this, vf_pb.dateTime, 3));
};


/**
 * @param {?proto.vf.dateTime|undefined} value
 * @return {!proto.vf.TableRequest} returns this
*/
proto.vf.TableRequest.prototype.setAsofstartdate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.clearAsofstartdate = function() {
  return this.setAsofstartdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.TableRequest.prototype.hasAsofstartdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional dateTime asOfEndDate = 4;
 * @return {?proto.vf.dateTime}
 */
proto.vf.TableRequest.prototype.getAsofenddate = function() {
  return /** @type{?proto.vf.dateTime} */ (
    jspb.Message.getWrapperField(this, vf_pb.dateTime, 4));
};


/**
 * @param {?proto.vf.dateTime|undefined} value
 * @return {!proto.vf.TableRequest} returns this
*/
proto.vf.TableRequest.prototype.setAsofenddate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.clearAsofenddate = function() {
  return this.setAsofenddate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.TableRequest.prototype.hasAsofenddate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, string> filters = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.vf.TableRequest.prototype.getFiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.clearFiltersMap = function() {
  this.getFiltersMap().clear();
  return this;
};


/**
 * map<string, dateTime> dateFilters = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vf.dateTime>}
 */
proto.vf.TableRequest.prototype.getDatefiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vf.dateTime>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.vf.dateTime));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.clearDatefiltersMap = function() {
  this.getDatefiltersMap().clear();
  return this;
};


/**
 * optional int32 pageSize = 7;
 * @return {number}
 */
proto.vf.TableRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 pageNo = 8;
 * @return {number}
 */
proto.vf.TableRequest.prototype.getPageno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.TableRequest} returns this
 */
proto.vf.TableRequest.prototype.setPageno = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.TableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.TableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.TableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.TableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: msg.getTable_asB64(),
    table2: (f = msg.getTable2()) && vf_table_pb.Table.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.TableResponse}
 */
proto.vf.TableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.TableResponse;
  return proto.vf.TableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.TableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.TableResponse}
 */
proto.vf.TableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTable(value);
      break;
    case 2:
      var value = new vf_table_pb.Table;
      reader.readMessage(value,vf_table_pb.Table.deserializeBinaryFromReader);
      msg.setTable2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.TableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.TableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.TableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.TableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTable2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vf_table_pb.Table.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes Table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.vf.TableResponse.prototype.getTable = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Table = 1;
 * This is a type-conversion wrapper around `getTable()`
 * @return {string}
 */
proto.vf.TableResponse.prototype.getTable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTable()));
};


/**
 * optional bytes Table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTable()`
 * @return {!Uint8Array}
 */
proto.vf.TableResponse.prototype.getTable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vf.TableResponse} returns this
 */
proto.vf.TableResponse.prototype.setTable = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Table Table2 = 2;
 * @return {?proto.vf.Table}
 */
proto.vf.TableResponse.prototype.getTable2 = function() {
  return /** @type{?proto.vf.Table} */ (
    jspb.Message.getWrapperField(this, vf_table_pb.Table, 2));
};


/**
 * @param {?proto.vf.Table|undefined} value
 * @return {!proto.vf.TableResponse} returns this
*/
proto.vf.TableResponse.prototype.setTable2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.TableResponse} returns this
 */
proto.vf.TableResponse.prototype.clearTable2 = function() {
  return this.setTable2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.TableResponse.prototype.hasTable2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vf.FilterValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterValues.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.vf.FilterValue.toObject, includeInstance),
    not: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterValues}
 */
proto.vf.FilterValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterValues;
  return proto.vf.FilterValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterValues}
 */
proto.vf.FilterValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vf.FilterValue;
      reader.readMessage(value,proto.vf.FilterValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vf.FilterValue.serializeBinaryToWriter
    );
  }
  f = message.getNot();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated FilterValue Values = 1;
 * @return {!Array<!proto.vf.FilterValue>}
 */
proto.vf.FilterValues.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.vf.FilterValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vf.FilterValue, 1));
};


/**
 * @param {!Array<!proto.vf.FilterValue>} value
 * @return {!proto.vf.FilterValues} returns this
*/
proto.vf.FilterValues.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vf.FilterValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vf.FilterValue}
 */
proto.vf.FilterValues.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vf.FilterValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.FilterValues} returns this
 */
proto.vf.FilterValues.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional bool Not = 2;
 * @return {boolean}
 */
proto.vf.FilterValues.prototype.getNot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vf.FilterValues} returns this
 */
proto.vf.FilterValues.prototype.setNot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vf.FilterValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.vf.FilterValue.FilterCase = {
  FILTER_NOT_SET: 0,
  STRING: 1,
  NUM: 2,
  NUMRANGE: 3,
  BOOL: 4
};

/**
 * @return {proto.vf.FilterValue.FilterCase}
 */
proto.vf.FilterValue.prototype.getFilterCase = function() {
  return /** @type {proto.vf.FilterValue.FilterCase} */(jspb.Message.computeOneofCase(this, proto.vf.FilterValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: (f = msg.getString()) && proto.vf.FilterStringValue.toObject(includeInstance, f),
    num: (f = msg.getNum()) && proto.vf.FilterNumValue.toObject(includeInstance, f),
    numrange: (f = msg.getNumrange()) && proto.vf.FilterNumRangeValue.toObject(includeInstance, f),
    bool: (f = msg.getBool()) && proto.vf.FilterBoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterValue}
 */
proto.vf.FilterValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterValue;
  return proto.vf.FilterValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterValue}
 */
proto.vf.FilterValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vf.FilterStringValue;
      reader.readMessage(value,proto.vf.FilterStringValue.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 2:
      var value = new proto.vf.FilterNumValue;
      reader.readMessage(value,proto.vf.FilterNumValue.deserializeBinaryFromReader);
      msg.setNum(value);
      break;
    case 3:
      var value = new proto.vf.FilterNumRangeValue;
      reader.readMessage(value,proto.vf.FilterNumRangeValue.deserializeBinaryFromReader);
      msg.setNumrange(value);
      break;
    case 4:
      var value = new proto.vf.FilterBoolValue;
      reader.readMessage(value,proto.vf.FilterBoolValue.deserializeBinaryFromReader);
      msg.setBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vf.FilterStringValue.serializeBinaryToWriter
    );
  }
  f = message.getNum();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vf.FilterNumValue.serializeBinaryToWriter
    );
  }
  f = message.getNumrange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vf.FilterNumRangeValue.serializeBinaryToWriter
    );
  }
  f = message.getBool();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vf.FilterBoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilterStringValue String = 1;
 * @return {?proto.vf.FilterStringValue}
 */
proto.vf.FilterValue.prototype.getString = function() {
  return /** @type{?proto.vf.FilterStringValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterStringValue, 1));
};


/**
 * @param {?proto.vf.FilterStringValue|undefined} value
 * @return {!proto.vf.FilterValue} returns this
*/
proto.vf.FilterValue.prototype.setString = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vf.FilterValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterValue} returns this
 */
proto.vf.FilterValue.prototype.clearString = function() {
  return this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterValue.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FilterNumValue Num = 2;
 * @return {?proto.vf.FilterNumValue}
 */
proto.vf.FilterValue.prototype.getNum = function() {
  return /** @type{?proto.vf.FilterNumValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterNumValue, 2));
};


/**
 * @param {?proto.vf.FilterNumValue|undefined} value
 * @return {!proto.vf.FilterValue} returns this
*/
proto.vf.FilterValue.prototype.setNum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.vf.FilterValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterValue} returns this
 */
proto.vf.FilterValue.prototype.clearNum = function() {
  return this.setNum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterValue.prototype.hasNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FilterNumRangeValue NumRange = 3;
 * @return {?proto.vf.FilterNumRangeValue}
 */
proto.vf.FilterValue.prototype.getNumrange = function() {
  return /** @type{?proto.vf.FilterNumRangeValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterNumRangeValue, 3));
};


/**
 * @param {?proto.vf.FilterNumRangeValue|undefined} value
 * @return {!proto.vf.FilterValue} returns this
*/
proto.vf.FilterValue.prototype.setNumrange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.vf.FilterValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterValue} returns this
 */
proto.vf.FilterValue.prototype.clearNumrange = function() {
  return this.setNumrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterValue.prototype.hasNumrange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FilterBoolValue Bool = 4;
 * @return {?proto.vf.FilterBoolValue}
 */
proto.vf.FilterValue.prototype.getBool = function() {
  return /** @type{?proto.vf.FilterBoolValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterBoolValue, 4));
};


/**
 * @param {?proto.vf.FilterBoolValue|undefined} value
 * @return {!proto.vf.FilterValue} returns this
*/
proto.vf.FilterValue.prototype.setBool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.vf.FilterValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterValue} returns this
 */
proto.vf.FilterValue.prototype.clearBool = function() {
  return this.setBool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterValue.prototype.hasBool = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterStringValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterStringValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterStringValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterStringValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterStringValue}
 */
proto.vf.FilterStringValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterStringValue;
  return proto.vf.FilterStringValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterStringValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterStringValue}
 */
proto.vf.FilterStringValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vf.FilterStringValue.Operators} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterStringValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterStringValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterStringValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterStringValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.FilterStringValue.Operators = {
  EQUAL: 0,
  STARTSWITH: 12,
  ENDSWITH: 13,
  CONTAINS: 14
};

/**
 * optional Operators Operator = 1;
 * @return {!proto.vf.FilterStringValue.Operators}
 */
proto.vf.FilterStringValue.prototype.getOperator = function() {
  return /** @type {!proto.vf.FilterStringValue.Operators} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vf.FilterStringValue.Operators} value
 * @return {!proto.vf.FilterStringValue} returns this
 */
proto.vf.FilterStringValue.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Value = 2;
 * @return {string}
 */
proto.vf.FilterStringValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.FilterStringValue} returns this
 */
proto.vf.FilterStringValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterBoolValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterBoolValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterBoolValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterBoolValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterBoolValue}
 */
proto.vf.FilterBoolValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterBoolValue;
  return proto.vf.FilterBoolValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterBoolValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterBoolValue}
 */
proto.vf.FilterBoolValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterBoolValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterBoolValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterBoolValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterBoolValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool Value = 2;
 * @return {boolean}
 */
proto.vf.FilterBoolValue.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vf.FilterBoolValue} returns this
 */
proto.vf.FilterBoolValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vf.FilterNumValue.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.vf.FilterNumValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT32: 2,
  DOUBLE: 3,
  FLOAT: 4,
  INT64: 5,
  DATETIME: 6
};

/**
 * @return {proto.vf.FilterNumValue.ValueCase}
 */
proto.vf.FilterNumValue.prototype.getValueCase = function() {
  return /** @type {proto.vf.FilterNumValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.vf.FilterNumValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterNumValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterNumValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterNumValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    int32: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    int64: jspb.Message.getFieldWithDefault(msg, 5, 0),
    datetime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterNumValue}
 */
proto.vf.FilterNumValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterNumValue;
  return proto.vf.FilterNumValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterNumValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterNumValue}
 */
proto.vf.FilterNumValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vf.FilterNumValue.Operators} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterNumValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterNumValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterNumValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.FilterNumValue.Operators = {
  EQUAL: 0,
  GREATER: 22,
  GREATEREQUAL: 23,
  LESSER: 34,
  LESSEREQUAL: 35
};

/**
 * optional Operators Operator = 1;
 * @return {!proto.vf.FilterNumValue.Operators}
 */
proto.vf.FilterNumValue.prototype.getOperator = function() {
  return /** @type {!proto.vf.FilterNumValue.Operators} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vf.FilterNumValue.Operators} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 Int32 = 2;
 * @return {number}
 */
proto.vf.FilterNumValue.prototype.getInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setInt32 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.clearInt32 = function() {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumValue.prototype.hasInt32 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double Double = 3;
 * @return {number}
 */
proto.vf.FilterNumValue.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float Float = 4;
 * @return {number}
 */
proto.vf.FilterNumValue.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 Int64 = 5;
 * @return {number}
 */
proto.vf.FilterNumValue.prototype.getInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setInt64 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.clearInt64 = function() {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumValue.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 DateTime = 6;
 * @return {number}
 */
proto.vf.FilterNumValue.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.setDatetime = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumValue} returns this
 */
proto.vf.FilterNumValue.prototype.clearDatetime = function() {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumValue.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterNumRangeValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterNumRangeValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterNumRangeValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumRangeValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    minvalue: (f = msg.getMinvalue()) && proto.vf.FilterNumMinValue.toObject(includeInstance, f),
    maxvalue: (f = msg.getMaxvalue()) && proto.vf.FilterNumMaxValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterNumRangeValue}
 */
proto.vf.FilterNumRangeValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterNumRangeValue;
  return proto.vf.FilterNumRangeValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterNumRangeValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterNumRangeValue}
 */
proto.vf.FilterNumRangeValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vf.FilterNumMinValue;
      reader.readMessage(value,proto.vf.FilterNumMinValue.deserializeBinaryFromReader);
      msg.setMinvalue(value);
      break;
    case 2:
      var value = new proto.vf.FilterNumMaxValue;
      reader.readMessage(value,proto.vf.FilterNumMaxValue.deserializeBinaryFromReader);
      msg.setMaxvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterNumRangeValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterNumRangeValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterNumRangeValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumRangeValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinvalue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vf.FilterNumMinValue.serializeBinaryToWriter
    );
  }
  f = message.getMaxvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vf.FilterNumMaxValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilterNumMinValue MinValue = 1;
 * @return {?proto.vf.FilterNumMinValue}
 */
proto.vf.FilterNumRangeValue.prototype.getMinvalue = function() {
  return /** @type{?proto.vf.FilterNumMinValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterNumMinValue, 1));
};


/**
 * @param {?proto.vf.FilterNumMinValue|undefined} value
 * @return {!proto.vf.FilterNumRangeValue} returns this
*/
proto.vf.FilterNumRangeValue.prototype.setMinvalue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterNumRangeValue} returns this
 */
proto.vf.FilterNumRangeValue.prototype.clearMinvalue = function() {
  return this.setMinvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumRangeValue.prototype.hasMinvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FilterNumMaxValue MaxValue = 2;
 * @return {?proto.vf.FilterNumMaxValue}
 */
proto.vf.FilterNumRangeValue.prototype.getMaxvalue = function() {
  return /** @type{?proto.vf.FilterNumMaxValue} */ (
    jspb.Message.getWrapperField(this, proto.vf.FilterNumMaxValue, 2));
};


/**
 * @param {?proto.vf.FilterNumMaxValue|undefined} value
 * @return {!proto.vf.FilterNumRangeValue} returns this
*/
proto.vf.FilterNumRangeValue.prototype.setMaxvalue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.FilterNumRangeValue} returns this
 */
proto.vf.FilterNumRangeValue.prototype.clearMaxvalue = function() {
  return this.setMaxvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumRangeValue.prototype.hasMaxvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vf.FilterNumMinValue.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.vf.FilterNumMinValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT32: 2,
  DOUBLE: 3,
  FLOAT: 4,
  INT64: 5,
  DATETIME: 6
};

/**
 * @return {proto.vf.FilterNumMinValue.ValueCase}
 */
proto.vf.FilterNumMinValue.prototype.getValueCase = function() {
  return /** @type {proto.vf.FilterNumMinValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.vf.FilterNumMinValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterNumMinValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterNumMinValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterNumMinValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumMinValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    int32: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    int64: jspb.Message.getFieldWithDefault(msg, 5, 0),
    datetime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterNumMinValue}
 */
proto.vf.FilterNumMinValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterNumMinValue;
  return proto.vf.FilterNumMinValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterNumMinValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterNumMinValue}
 */
proto.vf.FilterNumMinValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vf.FilterNumMinValue.Operators} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterNumMinValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterNumMinValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterNumMinValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumMinValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.FilterNumMinValue.Operators = {
  INVALID: 0,
  GREATER: 22,
  GREATEREQUAL: 23
};

/**
 * optional Operators Operator = 1;
 * @return {!proto.vf.FilterNumMinValue.Operators}
 */
proto.vf.FilterNumMinValue.prototype.getOperator = function() {
  return /** @type {!proto.vf.FilterNumMinValue.Operators} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vf.FilterNumMinValue.Operators} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 Int32 = 2;
 * @return {number}
 */
proto.vf.FilterNumMinValue.prototype.getInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setInt32 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumMinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.clearInt32 = function() {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumMinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMinValue.prototype.hasInt32 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double Double = 3;
 * @return {number}
 */
proto.vf.FilterNumMinValue.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumMinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumMinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMinValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float Float = 4;
 * @return {number}
 */
proto.vf.FilterNumMinValue.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumMinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumMinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMinValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 Int64 = 5;
 * @return {number}
 */
proto.vf.FilterNumMinValue.prototype.getInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setInt64 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumMinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.clearInt64 = function() {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumMinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMinValue.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 DateTime = 6;
 * @return {number}
 */
proto.vf.FilterNumMinValue.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.setDatetime = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumMinValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMinValue} returns this
 */
proto.vf.FilterNumMinValue.prototype.clearDatetime = function() {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumMinValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMinValue.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vf.FilterNumMaxValue.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.vf.FilterNumMaxValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT32: 2,
  DOUBLE: 3,
  FLOAT: 4,
  INT64: 5,
  DATETIME: 6
};

/**
 * @return {proto.vf.FilterNumMaxValue.ValueCase}
 */
proto.vf.FilterNumMaxValue.prototype.getValueCase = function() {
  return /** @type {proto.vf.FilterNumMaxValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.vf.FilterNumMaxValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.FilterNumMaxValue.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.FilterNumMaxValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.FilterNumMaxValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumMaxValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    int32: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    int64: jspb.Message.getFieldWithDefault(msg, 5, 0),
    datetime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.FilterNumMaxValue}
 */
proto.vf.FilterNumMaxValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.FilterNumMaxValue;
  return proto.vf.FilterNumMaxValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.FilterNumMaxValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.FilterNumMaxValue}
 */
proto.vf.FilterNumMaxValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vf.FilterNumMaxValue.Operators} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.FilterNumMaxValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.FilterNumMaxValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.FilterNumMaxValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.FilterNumMaxValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.FilterNumMaxValue.Operators = {
  INVALID: 0,
  LESSER: 34,
  LESSEREQUAL: 35
};

/**
 * optional Operators Operator = 1;
 * @return {!proto.vf.FilterNumMaxValue.Operators}
 */
proto.vf.FilterNumMaxValue.prototype.getOperator = function() {
  return /** @type {!proto.vf.FilterNumMaxValue.Operators} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vf.FilterNumMaxValue.Operators} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 Int32 = 2;
 * @return {number}
 */
proto.vf.FilterNumMaxValue.prototype.getInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setInt32 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumMaxValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.clearInt32 = function() {
  return jspb.Message.setOneofField(this, 2, proto.vf.FilterNumMaxValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMaxValue.prototype.hasInt32 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double Double = 3;
 * @return {number}
 */
proto.vf.FilterNumMaxValue.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumMaxValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 3, proto.vf.FilterNumMaxValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMaxValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float Float = 4;
 * @return {number}
 */
proto.vf.FilterNumMaxValue.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumMaxValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 4, proto.vf.FilterNumMaxValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMaxValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 Int64 = 5;
 * @return {number}
 */
proto.vf.FilterNumMaxValue.prototype.getInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setInt64 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumMaxValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.clearInt64 = function() {
  return jspb.Message.setOneofField(this, 5, proto.vf.FilterNumMaxValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMaxValue.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 DateTime = 6;
 * @return {number}
 */
proto.vf.FilterNumMaxValue.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.setDatetime = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumMaxValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vf.FilterNumMaxValue} returns this
 */
proto.vf.FilterNumMaxValue.prototype.clearDatetime = function() {
  return jspb.Message.setOneofField(this, 6, proto.vf.FilterNumMaxValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.FilterNumMaxValue.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vf.SelectRequest.repeatedFields_ = [2,15,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    filtersMap: (f = msg.getFiltersMap()) ? f.toObject(includeInstance, proto.vf.FilterValues.toObject) : [],
    groupbyList: jspb.Message.toObjectList(msg.getGroupbyList(),
    proto.vf.GroupField.toObject, includeInstance),
    orderbyList: jspb.Message.toObjectList(msg.getOrderbyList(),
    proto.vf.SortField.toObject, includeInstance),
    pagesize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageno: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.SelectRequest}
 */
proto.vf.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.SelectRequest;
  return proto.vf.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.SelectRequest}
 */
proto.vf.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasetname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    case 3:
      var value = msg.getFiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vf.FilterValues.deserializeBinaryFromReader, "", new proto.vf.FilterValues());
         });
      break;
    case 15:
      var value = new proto.vf.GroupField;
      reader.readMessage(value,proto.vf.GroupField.deserializeBinaryFromReader);
      msg.addGroupby(value);
      break;
    case 20:
      var value = new proto.vf.SortField;
      reader.readMessage(value,proto.vf.SortField.deserializeBinaryFromReader);
      msg.addOrderby(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vf.FilterValues.serializeBinaryToWriter);
  }
  f = message.getGroupbyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.vf.GroupField.serializeBinaryToWriter
    );
  }
  f = message.getOrderbyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.vf.SortField.serializeBinaryToWriter
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPageno();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string dataSetName = 1;
 * @return {string}
 */
proto.vf.SelectRequest.prototype.getDatasetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.setDatasetname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string columns = 2;
 * @return {!Array<string>}
 */
proto.vf.SelectRequest.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * map<string, FilterValues> filters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vf.FilterValues>}
 */
proto.vf.SelectRequest.prototype.getFiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vf.FilterValues>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.vf.FilterValues));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.clearFiltersMap = function() {
  this.getFiltersMap().clear();
  return this;
};


/**
 * repeated GroupField groupBy = 15;
 * @return {!Array<!proto.vf.GroupField>}
 */
proto.vf.SelectRequest.prototype.getGroupbyList = function() {
  return /** @type{!Array<!proto.vf.GroupField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vf.GroupField, 15));
};


/**
 * @param {!Array<!proto.vf.GroupField>} value
 * @return {!proto.vf.SelectRequest} returns this
*/
proto.vf.SelectRequest.prototype.setGroupbyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.vf.GroupField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vf.GroupField}
 */
proto.vf.SelectRequest.prototype.addGroupby = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.vf.GroupField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.clearGroupbyList = function() {
  return this.setGroupbyList([]);
};


/**
 * repeated SortField orderBy = 20;
 * @return {!Array<!proto.vf.SortField>}
 */
proto.vf.SelectRequest.prototype.getOrderbyList = function() {
  return /** @type{!Array<!proto.vf.SortField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vf.SortField, 20));
};


/**
 * @param {!Array<!proto.vf.SortField>} value
 * @return {!proto.vf.SelectRequest} returns this
*/
proto.vf.SelectRequest.prototype.setOrderbyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.vf.SortField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vf.SortField}
 */
proto.vf.SelectRequest.prototype.addOrderby = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.vf.SortField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.clearOrderbyList = function() {
  return this.setOrderbyList([]);
};


/**
 * optional int32 pageSize = 4;
 * @return {number}
 */
proto.vf.SelectRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 pageNo = 5;
 * @return {number}
 */
proto.vf.SelectRequest.prototype.getPageno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vf.SelectRequest} returns this
 */
proto.vf.SelectRequest.prototype.setPageno = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.SelectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.SelectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.SelectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SelectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && vf_table_pb.Table.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.SelectResponse}
 */
proto.vf.SelectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.SelectResponse;
  return proto.vf.SelectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.SelectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.SelectResponse}
 */
proto.vf.SelectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vf_table_pb.Table;
      reader.readMessage(value,vf_table_pb.Table.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.SelectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.SelectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.SelectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SelectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vf_table_pb.Table.serializeBinaryToWriter
    );
  }
};


/**
 * optional Table Result = 1;
 * @return {?proto.vf.Table}
 */
proto.vf.SelectResponse.prototype.getResult = function() {
  return /** @type{?proto.vf.Table} */ (
    jspb.Message.getWrapperField(this, vf_table_pb.Table, 1));
};


/**
 * @param {?proto.vf.Table|undefined} value
 * @return {!proto.vf.SelectResponse} returns this
*/
proto.vf.SelectResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vf.SelectResponse} returns this
 */
proto.vf.SelectResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vf.SelectResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.SortField.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.SortField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.SortField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SortField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    order: jspb.Message.getFieldWithDefault(msg, 25, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.SortField}
 */
proto.vf.SortField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.SortField;
  return proto.vf.SortField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.SortField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.SortField}
 */
proto.vf.SortField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 25:
      var value = /** @type {!proto.vf.SortField.Sort} */ (reader.readEnum());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.SortField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.SortField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.SortField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.SortField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      25,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.SortField.Sort = {
  ASCENDING: 0,
  DESCENDING: 10
};

/**
 * optional string Name = 1;
 * @return {string}
 */
proto.vf.SortField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.SortField} returns this
 */
proto.vf.SortField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Sort Order = 25;
 * @return {!proto.vf.SortField.Sort}
 */
proto.vf.SortField.prototype.getOrder = function() {
  return /** @type {!proto.vf.SortField.Sort} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {!proto.vf.SortField.Sort} value
 * @return {!proto.vf.SortField} returns this
 */
proto.vf.SortField.prototype.setOrder = function(value) {
  return jspb.Message.setProto3EnumField(this, 25, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vf.GroupField.prototype.toObject = function(opt_includeInstance) {
  return proto.vf.GroupField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vf.GroupField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.GroupField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aggr: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vf.GroupField}
 */
proto.vf.GroupField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vf.GroupField;
  return proto.vf.GroupField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vf.GroupField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vf.GroupField}
 */
proto.vf.GroupField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 100:
      var value = /** @type {!proto.vf.GroupField.Group} */ (reader.readEnum());
      msg.setAggr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vf.GroupField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vf.GroupField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vf.GroupField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vf.GroupField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAggr();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vf.GroupField.Group = {
  NONE: 0,
  AVG: 5,
  COUNT: 10,
  COUNTDISTINCT: 11,
  FIRST: 15,
  LAST: 20,
  MAX: 25,
  MEDIAN: 30,
  MIN: 35,
  STDDEV: 40,
  SUM: 45
};

/**
 * optional string Name = 1;
 * @return {string}
 */
proto.vf.GroupField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.GroupField} returns this
 */
proto.vf.GroupField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Alias = 2;
 * @return {string}
 */
proto.vf.GroupField.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vf.GroupField} returns this
 */
proto.vf.GroupField.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Group Aggr = 100;
 * @return {!proto.vf.GroupField.Group}
 */
proto.vf.GroupField.prototype.getAggr = function() {
  return /** @type {!proto.vf.GroupField.Group} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.vf.GroupField.Group} value
 * @return {!proto.vf.GroupField} returns this
 */
proto.vf.GroupField.prototype.setAggr = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};


goog.object.extend(exports, proto.vf);
